---
# HARNESS - Harness Application Setup
# ===================================
# The information in this file is used when we create your Application
# and deployment pipelines in Harness.
#
# .. DANGER::
#   The information in this file is **ONLY** used for the initial set up of your
#   application in Harness.
#
#   Changing any of these values after your application already exists in
#   Harness will **NOT HAVE ANY EFFECT**.

# Deployment Type/Paradigm
# ------------------------
# .. _blue-green: https://docs.harness.io/article/325x7awntc-deployment-concepts-and-strategies#blue_green_deployment
# .. _in-place: https://docs.harness.io/article/325x7awntc-deployment-concepts-and-strategies#rolling_deployment
#
# Valid Values: `blue-green`_ OR `in-place`_ (Rolling)
deployment_type: in-place

# Users & Groups
# --------------
# A list of Groups (and Users) that should be created in Harness.
#
# Each Group consists of:
#
# :name: The name of the Group | **Required**
# :type: The type of Group. | **Required**
#
#   Valid values:
#
#   :team: Group will have full access to the Application in Harness
#   :notification: Group will receive deployment notifications from Harness
#
# :members: A list of the email addresses for users who should be part of the Group. | **Required**
#
# Each listed group and user will be created if they do not already exist and
# each listed user will be added to the indicated groups.
#
# It is suggested that you have at least two groups:
#
# A Team group that contains all the members of the AppDev team that should
# have access to the Application in Harness.
#
# A Notifications group. Users in this group will receive deployment notifications
# from Harness.
groups:
  - name: DevOps Team
    type: team
    members:
      - user.one@cengage.com
      - user.two@cengage.com
  - name: DevOps Notifications
    type: notification
    members:
      - user.one@cengage.com
      - user.two@cengage.com
      - user.three@cengage.com

# Artifact
# --------
# Settings required to allow Harness to find the application's artifact.
#
# :server: Alias name to a known/supported Artifact Server | **Required**
#
#   Valid Values:
#
#     - artifactory_cengage_maven
#     - nexus_cengage_maven
#     - nexus_mindtap_maven
#     - nexus_mindtap_npm
#     - no_artifact_required
#
#   If set to ``no_artifact_required``, the rest of the values are unnecessary
#
# :format: Artifact packaging format | **Required**
#
#   Valid Values:  ZIP | TAR | JAR | WAR
#
# :filter: Name, pattern or groupId | **Required**
#
#   The format of the value depends on the Artifact Store and Package Type
#
#   :Artifactory: Path with wildcards -- ``com/cengage/devops/mostly-harmless/**/*.zip``
#   :Cengage | Nexus Maven: GroupId.Name -- ``com.cengage.devops.mostly-harmless``
#   :Nexus NPM: NPM package name -- ``mostly-harmless``
#
# :sources: Source repo name for snapshots and releases | **Required**
#
artifact:
  server: artifactory_cengage_maven
  format: ZIP
  filter: com/cengage/devops/mostly-harmless/**/*.zip
  sources:
    snapshots: cengage-snapshots
    releases: cengage-releases

# Deployment Verification
# -----------------------
# Deployment verification entails running various types of automated tests
# during a deployment. These tests help ensure that the application has
# been properly deployed and is in a working state.
#
# We currently support deployment verification using...
#
# :jenkins: Deployment verification by Jenkins job. **Required**
#
#   At least one Jenkins job is required. You can configure as many as necessary.
#   All Jenkins jobs listed here are assumed to be configured on `jenkins-qa-automation.cengage.info`
#
#   :name: A descriptive name for the job | **Required**
#   :job_name: The actual job name as known to Jenkins | **Required**
#   :parameters: A mapping of parameters that the job accepts. | **Required**
#
#     Parameter values can make use of these variables defined by Harness:
#       * ``app.name`` - The name of the Harness Application.
#       * ``env.name`` - The name of the environment being deployed to.
#       * ``context.tsunamiInfra.ROUTE_PRIVATE`` - The internal ALB URL to the newly deployed instances.
#
#   :environments: The job will run when deployed to any of the environments in
#                  the list. | **Required**
#
# :splunk: Deployment verification by Splunk log analysis
#
#   .. ATTENTION::
#     Splunk analysis will run in **parallel** with the **LAST** Jenkins job
#     listed above.
#
#     IF there is no traffic going to the application during the deployment
#     verification stage then you don't need to activate the Splunk analysis.
#
#   :deploy_verification: List each environment for which you want to activate Splunk analysis. | **Required**
#
#     In general, this list should match the ``environments`` list from the LAST
#     Jenkins job listed above.
#
#     To disable Splunk analysis set this value to an empty list: ``[]``
#
#   :queries: Set a Splunk query to use per environment | **Required**
#
#     Each query should be looking for errors and/or anomalous behavior in the
#     application. Harness will execute this query every minute or so in parallel
#     with the LAST Jenkins job. The Jenkins job should be hitting the application
#     and generating traffic and log entries into Splunk.
#
#     If the query produces any results, meaning that it found errors, it will
#     cause the deployment to fail.
#
#     If you have disabled Splunk analysis, you should set this value to an empty value: ``{}``
#
# :dynatrace: Dynatrace deployment verification. | **Deferred**
#
#   Dynatrace verification works similar to Splunk verification. Harness executes
#   a Dynatrace query every minute or so looking for errors and anomalies. It
#   runs in **parallel** with the LAST Jenkins job **and** the Splunk analysis
#
#   .. ATTENTION::
#     Dynatrace verification has to be set up **after** the first deployment to
#     each environment.
#
#     **There are no settings required for Dynatrace at this time**
#
verification:
  jenkins:
    - name: Functional Tests
      job_name: mostly-harmless/Functional Tests
      parameters:
        url: http://${context.tsunamiInfra.ROUTE_PRIVATE}:8080
        env: ${env.name}
      environments:
        - dev
        - qa
        - stage
        - perf
        - prod
    - name: Load Tests
      job_name: mostly-harmless/Load Tests
      parameters:
        url: http://${context.tsunamiInfra.ROUTE_PRIVATE}:8080
        env: ${env.name}
        duration: 300
      environments:
        - dev
        - qa
        - stage
        - perf
        - prod
  splunk:
    deploy_verification:
      - dev
      - qa
      - prod
    queries:
      dev: index=devops_nonprod_logs source="mostly-harmless-app-requests-dev" \[ERROR\]
      qa: index=devops_nonprod_logs source="mostly-harmless-app-requests-qa" \[ERROR\]
      stage: index=devops_nonprod_logs source="mostly-harmless-app-requests-stage" \[ERROR\]
      perf: index=devops_nonprod_logs source="mostly-harmless-app-requests-perf" \[ERROR\]
      prod: index=devops_prod_logs source="mostly-harmless-app-requests-prod" \[ERROR\]

# Change Management
# -----------------
# When deploying to the Production environment, Harness will automatically create
# an RFC for the deployment. The Production deployment will pause at that point
# and wait for the RFC to be approved before continuing.
#
# These settings are needed by the RFC process to help identify the application
# in SNOW.
#
# :item: RFC Item Name | **Required**
#
#   A Change Management team member can provide this value for the application.
#
#   .. TIP::
#     The ``item`` for an application can be requested in the
#     ``#onboarding-harness-snow-apps`` Slack channel.
#
# :sub_category: RFC Sub-category value | **Required**
#
#   Valid values: Internal Application | External Application
#
change_management:
  item: CD-DevOps
  sub_category: Internal Application
