---
# Shared Section
SHARED:
  # All config files have access to any variables in the SHARED:params section
  params: {}

# A list of configuration files needed by your application.
# Each file consists of:
# * name: The name of the file in the config/ directory.
# * metadata: Metadata about the file
#   - path: Where the file should be written.
#         *REQUIRED*
#   - dest_name: Name of the file in it's final destination.
#         Usage should be limited. A good use-case is for "dot" files
#         that you don't want to start with a `.` in the git repo, lest
#         they be hidden, but must start with a `.` when installed.
#         See `dot-trarc` below as an example.
#         *OPTIONAL -- Defaults to `name` above*
#   - user: User who owns the file.
#         *OPTIONAL -- Default: `user` as listed in app.yml*
#   - group: Group access to the file.
#         *OPTIONAL -- Default: `group` as listed in app.yml*
#   - perms: File Permissions.
#         *OPTIONAL -- Default: 0640*
#   - restart: The name of a service to restart if this config file changes.
#         Mainly used to trigger a restart of a third-party service that
#         may be dependent on the config file, e.g. nginx.
#
#         NOTE #1: You do **not** need to list your application here. Any
#         changes to any config file will automatically cause your
#         application to be restarted.
#
#         NOTE #2: See note about `.service` files below.
#
#         *OPTIONAL -- Default: none*
# * params: Freeform mapping of environment specific parameters to their values.
#       These params are **only** accessible to the config file they are
#       defined under.
#       *OPTIONAL -- Defaults to empty map*
# * addtl_secrets: Additional Secrets needed by the config file.
#      Tsunami will look for secrets for each config file in a designated path in
#      Vault. See the 'Managing Secrets' section of config/README.md for more
#      details.
#
#      However, there may be times when you need to pull in additional secrets from
#      other locations in Vault. An example would be a secret that is shared
#      across environments or config files that you don't want and shouldn't have
#      to store in multiple locations in Vault. In this case you can use this setting
#      to configure additional secrets to be read from Vault and stored on a per
#      config file basis for use in the config file.
#
#      This setting is a mapping between a `name` and a Vault path. The secret
#      at the specified path will be read from Vault and stored in a variable
#      with the given `name`. All additional secrets are stored under a top-level
#      variable named `addtl_secrets` that can be used in the config file template.
#      The Vault path should *not* include the `secret/` prefix.
#
#      See the example below in the `default.json` config file section.
#
#      *OPTIONAL -- Defaults to empty map*
# ------------------------------------------------------------------------------
# Special Files:
# * .service
#    - Any file that ends with `.service` is assumed to be a systemd unit file
#      used to control the starting, stopping and restarting of a service.
#    - You can have as many of these as you need.
#    - All `metadata` is optional...
#      - path - defaults to /etc/systemd/system
#      - user - defaults to root
#      - group - defaults to root
#    - Any change to any other config files will trigger each of your services
#      to be restarted.
#    - You should **not** use the `restart` param to trigger a restart of any
#      of your services (.service files). See above.
FILES:
  - name: mostly-harmless.conf
    metadata:
      path: /etc/nginx/conf.d
      user: nginx
      group: nginx
      restart: nginx
    params:
      comment: "!!HALT _ This file auto-generated by Ansible _ TLAH!!"
      port: 8080
      api_port: 4242
  - name: server.json
    metadata:
      path: /opt/mostly-harmless/conf
    params:
      port: 4242
  - name: mostly-harmless.service
